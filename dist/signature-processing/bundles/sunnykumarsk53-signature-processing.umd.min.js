!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/core"),require("signature_pad"),require("@angular/common/http"),require("@angular/platform-browser"),require("@angular/forms")):"function"==typeof define&&define.amd?define("@sunnykumarsk53/signature-processing",["exports","@angular/core","signature_pad","@angular/common/http","@angular/platform-browser","@angular/forms"],n):n(((t="undefined"!=typeof globalThis?globalThis:t||self).sunnykumarsk53=t.sunnykumarsk53||{},t.sunnykumarsk53["signature-processing"]={}),t.ng.core,t.signature_pad,t.ng.common.http,t.ng.platformBrowser,t.ng.forms)}(this,(function(t,n,e,o,r,a){"use strict";function i(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var s=i(e),u="http://localhost:9000/",c=function(){function t(t){this.http=t}return t.prototype.insertSignature=function(t){return console.log(t),this.http.post(u+"api/user/insertSignature",t)},t.prototype.insertUploadSignature=function(t){return console.log(t),this.http.post(u+"upload",t)},t}();c.ɵprov=n.ɵɵdefineInjectable({factory:function(){return new c(n.ɵɵinject(o.HttpClient))},token:c,providedIn:"root"}),c.decorators=[{type:n.Injectable,args:[{providedIn:"root"}]}],c.ctorParameters=function(){return[{type:o.HttpClient}]};var l=function(){function t(t){this.service=t,this.backendRes={spadu:{signdata:""}},this.selectedFile=null}return t.prototype.selectImage=function(t){t.target.value&&(this.selectedFile=t.target.files[0])},t.prototype.onUpload=function(){var t=this,n=new FormData;n.append("sign",this.selectedFile,this.selectedFile.name),this.service.insertUploadSignature(n).subscribe((function(n){t.backendRes=n,console.log(n)}))},t.prototype.ngOnInit=function(){},t.prototype.ngAfterViewInit=function(){this.signaturePad=new s.default(this.signaturePadElement.nativeElement)},t.prototype.clear=function(){this.signaturePad.clear()},t.prototype.undo=function(){var t=this.signaturePad.toData();t&&(t.pop(),this.signaturePad.fromData(t))},t.prototype.changeColor=function(){var t="rgb("+Math.round(255*Math.random())+","+Math.round(255*Math.random())+","+Math.round(255*Math.random())+")";this.signaturePad.penColor=t},t.prototype.drawComplete=function(){var t=this.signaturePad.toDataURL("image/png",.5);console.log(t);this.base64toBlob(t);this.service.insertSignature({signdata:t}).subscribe((function(t){console.log(t)}))},t.prototype.base64toBlob=function(t){for(var n=atob(t.split(",")[1]),e=t.split(",")[0].split(":")[1].split(":")[0],o=new Array(n.length),r=0;r<n.length;r++)o[r]=n.charAt(r);var a=new Uint8Array(o);return new Blob([a],{type:e})},t.prototype.download=function(t,n){if(navigator.userAgent.indexOf("Safari")>-1&&-1===navigator.userAgent.indexOf("Chrome"))window.open(t);else{var e=this.dataURLToBlob(t),o=window.URL.createObjectURL(e),r=document.createElement("a");r.href=o,r.download=n,document.body.appendChild(r),r.click(),window.URL.revokeObjectURL(o)}},t.prototype.dataURLToBlob=function(t){for(var n=t.split(";base64,"),e=n[0].split(":")[1],o=window.atob(n[1]),r=o.length,a=new Uint8Array(r),i=0;i<r;++i)a[i]=o.charCodeAt(i);return new Blob([a],{type:e})},t.prototype.savePNG=function(){if(this.signaturePad.isEmpty())alert("Please provide a signature first.");else{var t=this.signaturePad.toDataURL();this.download(t,"signature.png")}},t}();l.decorators=[{type:n.Component,args:[{selector:"lib-signature-processing-unit",template:'\n\n\n  <h1 class="text-header">Signature Pad</h1>\n  <div class="signature-pad">\n    <div class="signature-pad--body">\n      <canvas #sPad width="900" height="500" style="touch-action: none;"></canvas>\n    </div>\n  </div>\n  <br>\n  <br>\n  <section class="container-fluid">\n      <div class="row">\n        <div class="col-3">\n          <button class="btn btn-danger" (click)="clear()">Clear</button>\n          <button class="btn btn-success" (click)="savePNG()">PNG</button>\n          \x3c!-- <button class="btn btn-warning" (click)="undo()">Undo</button>\n          <button class="btn btn-info" (click)="changeColor()">Change Color</button> --\x3e\n          <button class="btn btn-primary" (click)="drawComplete()">Save</button>\n        </div>\n        <div class="col-6">\n         \n          \x3c!-- <button class="btn btn-primary" >JPG</button>\n          <button class="btn btn-secondary" >SVG</button> --\x3e\n        </div>\n        <form enctype="multipart/form-data">\n          <div class="col-6">\n            <input (change)="selectImage($event)" name="sign" class="form-control" type="file" style="width:25%" required>\n          \n            <button class="btn btn-primary" type="button" (click)="onUpload()">Upload</button>\n          </div>\n        </form>\n       \n      </div>\n  </section>\n  <pre>\n    \x3c!-- {{backendRes.spadu.signdata}} --\x3e\n    <img [src]="backendRes.spadu.signdata" alt="Preview" >\n  </pre>\n  \n      \n\n \n\n   \n\n\n\n\n\n\n\n \n\n',styles:[".signature-pad{position:relative;display:flex;flex-direction:column;font-size:10px;width:100%;height:100%;max-width:900px;border:1px solid #e8e8e8;background-color:#fff;box-shadow:0 1px 4px rgba(0,0,0,.27),inset 0 0 40px rgba(0,0,0,.08);border-radius:4px}.signature-pad--body{position:relative;flex:1;border:1px solid #f4f4f4}"]}]}],l.ctorParameters=function(){return[{type:c}]},l.propDecorators={signaturePadElement:[{type:n.ViewChild,args:["sPad",{static:!0}]}]};var p=function(){function t(){}return t.prototype.ngOnInit=function(){},t}();p.decorators=[{type:n.Component,args:[{selector:"lib-signature-processing",template:"\n    <p>\n      signature-processing works!\n    </p>\n  "}]}],p.ctorParameters=function(){return[]};var d=function(){};d.decorators=[{type:n.NgModule,args:[{declarations:[p,l],imports:[r.BrowserModule,o.HttpClientModule,a.FormsModule],exports:[p,l]}]}],t.SignatureProcessingComponent=p,t.SignatureProcessingModule=d,t.SignatureProcessingService=c,t.SignatureProcessingUnitComponent=l,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=sunnykumarsk53-signature-processing.umd.min.js.map