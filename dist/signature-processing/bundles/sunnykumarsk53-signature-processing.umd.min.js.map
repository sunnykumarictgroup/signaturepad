{"version":3,"sources":["../../../projects/signature-processing/src/lib/signature-processing.service.ts","../../../projects/signature-processing/src/lib/signature-processing-unit/signature-processing-unit.component.ts","../../../projects/signature-processing/src/lib/signature-processing.component.ts","../../../projects/signature-processing/src/lib/signature-processing.module.ts"],"names":["url","SignatureProcessingService","http","this","prototype","insertSignature","params","console","log","post","insertUploadSignature","Injectable","args","providedIn","HttpClient","SignatureProcessingUnitComponent","service","backendRes","spadu","signdata","selectedFile","selectImage","event","target","value","files","onUpload","_this","fd","FormData","append","name","subscribe","result","ngOnInit","ngAfterViewInit","signaturePad","SignaturePad","signaturePadElement","nativeElement","clear","undo","data","toData","pop","fromData","changeColor","color","Math","round","random","penColor","drawComplete","base64","toDataURL","base64toBlob","bytestring","atob","split","mimeString","byteNumbers","Array","length","i","charAt","ia","Uint8Array","Blob","type","download","dataURL","filename","navigator","userAgent","indexOf","window","open","blob","dataURLToBlob","URL","createObjectURL","a","document","createElement","href","body","appendChild","click","revokeObjectURL","parts","contentType","raw","rawLength","uInt8Array","charCodeAt","savePNG","isEmpty","alert","Component","selector","template","ViewChild","static","SignatureProcessingComponent","NgModule","declarations","imports","BrowserModule","HttpClientModule","FormsModule","exports"],"mappings":"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","sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpEvent } from '@angular/common/http'\n\nconst url = 'http://localhost:9000/';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignatureProcessingService {\n\n  constructor(private http:HttpClient) { }\n\n  insertSignature(params: any) {\n    console.log(params)\n   \n    return this.http.post( url + 'api/user/insertSignature',params);\n  }\n\n  insertUploadSignature(params: any) {\n    console.log(params)\n   \n    return this.http.post( url + 'upload',params);\n  }\n}\n","import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport SignaturePad from 'signature_pad';\n import { SignatureProcessingService } from '../signature-processing.service';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'lib-signature-processing-unit',\n  templateUrl: './signature-processing-unit.component.html',\n  styleUrls: ['./signature-processing-unit.component.css']\n})\n\nexport class SignatureProcessingUnitComponent implements OnInit {\n  @ViewChild('sPad', {static: true}) signaturePadElement;\n  signaturePad: any;\n backendRes: any = {\n  spadu:{signdata:''}\n }\n  selectedFile: any = null;\n  selectImage(event: any){\n    if(event.target.value){\n      this.selectedFile = <File>event.target.files[0]\n    }\n  \n   \n  }\n  onUpload() {\n\n    const fd = new FormData();\n    // console.log(this.selectedFile.name,'hhhhhhhhhhhhhh');\n    fd.append('sign', this.selectedFile,this.selectedFile.name)\n      this.service.insertUploadSignature(fd).subscribe((result:any)=>{\n        this.backendRes=result;\n      console.log(result)\n    })\n\n  }\n\n  constructor(private service : SignatureProcessingService) { }\n\n  ngOnInit(): void {\n    \n  }\n\n  ngAfterViewInit(): void {\n    this.signaturePad = new SignaturePad(this.signaturePadElement.nativeElement);\n  }\n\n  clear() {\n    this.signaturePad.clear();\n  }\n  undo() {\n    const data = this.signaturePad.toData();\n    if (data) {\n      data.pop(); // remove the last dot or line\n      this.signaturePad.fromData(data);\n    }\n  }\n  changeColor() {\n    const r = Math.round(Math.random() * 255);\n    const g = Math.round(Math.random() * 255);\n    const b = Math.round(Math.random() * 255);\n    const color = 'rgb(' + r + ',' + g + ',' + b + ')';\n    this.signaturePad.penColor = color;\n  }\n\n  drawComplete() {\n    \n    const base64 = this.signaturePad.toDataURL('image/png',0.5);\n    console.log(base64);\n    const blob = this.base64toBlob(base64);\n    this.service.insertSignature({signdata:base64}).subscribe(result=>{\n      console.log(result)\n    })\n    //console.log(blob);\n   \n  }\n  base64toBlob(base64) {\n    const bytestring = atob(base64.split(',')[1]);\n    const mimeString = base64.split(',')[0].split(':')[1].split(':')[0];\n    const byteNumbers = new Array(bytestring.length);\n    for (let i=0; i<bytestring.length; i++) {\n      byteNumbers[i] = bytestring.charAt(i);\n    }\n    const ia = new Uint8Array(byteNumbers);\n    return new Blob([ia], {type: mimeString});\n  }\n  download(dataURL, filename) {\n    if (navigator.userAgent.indexOf('Safari') > -1 && navigator.userAgent.indexOf('Chrome') === -1) {\n      window.open(dataURL);\n    } else {\n      const blob = this.dataURLToBlob(dataURL);\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n\n      document.body.appendChild(a);\n      a.click();\n\n      window.URL.revokeObjectURL(url);\n    }\n  }\n  dataURLToBlob(dataURL) {\n    // Code taken from https://github.com/ebidel/filer.js\n    const parts = dataURL.split(';base64,');\n    const contentType = parts[0].split(':')[1];\n    const raw = window.atob(parts[1]);\n    const rawLength = raw.length;\n    const uInt8Array = new Uint8Array(rawLength);\n    for (let i = 0; i < rawLength; ++i) {\n      uInt8Array[i] = raw.charCodeAt(i);\n    }\n    return new Blob([uInt8Array], { type: contentType });\n  }\n  savePNG() {\n    if (this.signaturePad.isEmpty()) {\n      alert('Please provide a signature first.');\n    } else {\n      const dataURL = this.signaturePad.toDataURL();\n      this.download(dataURL, 'signature.png');\n    }\n  }\n  \n\n\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-signature-processing',\n  template: `\n    <p>\n      signature-processing works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class SignatureProcessingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { SignatureProcessingComponent } from './signature-processing.component';\nimport { SignatureProcessingUnitComponent } from './signature-processing-unit/signature-processing-unit.component';\n\n\n\nimport { BrowserModule } from '@angular/platform-browser';\n\n\nimport { HttpClientModule } from '@angular/common/http'\nimport { FormsModule } from '@angular/forms'\n\n@NgModule({\n  declarations: [SignatureProcessingComponent, SignatureProcessingUnitComponent],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule\n\n  ],\n  exports: [SignatureProcessingComponent, SignatureProcessingUnitComponent]\n})\nexport class SignatureProcessingModule { }\n"]}